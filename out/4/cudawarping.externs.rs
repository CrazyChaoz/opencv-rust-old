// cv::cuda::buildWarpAffineMaps(TraitClass, Primitive, SimpleClass, TraitClass, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:162
// ("cv::cuda::buildWarpAffineMaps", vec![(pred!(mut, ["M", "inverse", "dsize", "xmap", "ymap"], ["cv::Mat", "bool", "cv::Size", "cv::cuda::GpuMat*", "cv::cuda::GpuMat*"]), _)]),
pub fn cv_cuda_buildWarpAffineMaps_Mat_bool_Size_GpuMatR_GpuMatR(m: *mut c_void, inverse: bool, dsize: *const core::Size, xmap: *mut c_void, ymap: *mut c_void, ocvrs_return: *mut Result<()>);
// buildWarpAffineMaps(Mat, bool, Size, GpuMat &, GpuMat &, Stream &)(TraitClass, Primitive, SimpleClass, TraitClass, TraitClass, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:162
// ("cv::cuda::buildWarpAffineMaps", vec![(pred!(mut, ["M", "inverse", "dsize", "xmap", "ymap", "stream"], ["cv::Mat", "bool", "cv::Size", "cv::cuda::GpuMat*", "cv::cuda::GpuMat*", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_buildWarpAffineMaps_Mat_bool_Size_GpuMatR_GpuMatR_StreamR(m: *mut c_void, inverse: bool, dsize: *const core::Size, xmap: *mut c_void, ymap: *mut c_void, stream: *mut c_void, ocvrs_return: *mut Result<()>);
// cv::cuda::buildWarpAffineMaps(TraitClass, Primitive, SimpleClass, TraitClass, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:158
// ("cv::cuda::buildWarpAffineMaps", vec![(pred!(mut, ["M", "inverse", "dsize", "xmap", "ymap"], ["cv::UMat", "bool", "cv::Size", "cv::cuda::GpuMat*", "cv::cuda::GpuMat*"]), _)]),
pub fn cv_cuda_buildWarpAffineMaps_UMat_bool_Size_GpuMatR_GpuMatR(m: *mut c_void, inverse: bool, dsize: *const core::Size, xmap: *mut c_void, ymap: *mut c_void, ocvrs_return: *mut Result<()>);
// buildWarpAffineMaps(UMat, bool, Size, GpuMat &, GpuMat &, Stream &)(TraitClass, Primitive, SimpleClass, TraitClass, TraitClass, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:158
// ("cv::cuda::buildWarpAffineMaps", vec![(pred!(mut, ["M", "inverse", "dsize", "xmap", "ymap", "stream"], ["cv::UMat", "bool", "cv::Size", "cv::cuda::GpuMat*", "cv::cuda::GpuMat*", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_buildWarpAffineMaps_UMat_bool_Size_GpuMatR_GpuMatR_StreamR(m: *mut c_void, inverse: bool, dsize: *const core::Size, xmap: *mut c_void, ymap: *mut c_void, stream: *mut c_void, ocvrs_return: *mut Result<()>);
// cv::cuda::buildWarpAffineMaps(InputArray, Primitive, SimpleClass, OutputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:156
// ("cv::cuda::buildWarpAffineMaps", vec![(pred!(mut, ["M", "inverse", "dsize", "xmap", "ymap"], ["const cv::_InputArray*", "bool", "cv::Size", "const cv::_OutputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_cuda_buildWarpAffineMaps_const__InputArrayR_bool_Size_const__OutputArrayR_const__OutputArrayR(m: *const c_void, inverse: bool, dsize: *const core::Size, xmap: *const c_void, ymap: *const c_void, ocvrs_return: *mut Result<()>);
// buildWarpAffineMaps(InputArray, bool, Size, OutputArray, OutputArray, Stream &)(InputArray, Primitive, SimpleClass, OutputArray, OutputArray, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:156
// ("cv::cuda::buildWarpAffineMaps", vec![(pred!(mut, ["M", "inverse", "dsize", "xmap", "ymap", "stream"], ["const cv::_InputArray*", "bool", "cv::Size", "const cv::_OutputArray*", "const cv::_OutputArray*", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_buildWarpAffineMaps_const__InputArrayR_bool_Size_const__OutputArrayR_const__OutputArrayR_StreamR(m: *const c_void, inverse: bool, dsize: *const core::Size, xmap: *const c_void, ymap: *const c_void, stream: *mut c_void, ocvrs_return: *mut Result<()>);
// cv::cuda::buildWarpPerspectiveMaps(TraitClass, Primitive, SimpleClass, TraitClass, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:212
// ("cv::cuda::buildWarpPerspectiveMaps", vec![(pred!(mut, ["M", "inverse", "dsize", "xmap", "ymap"], ["cv::Mat", "bool", "cv::Size", "cv::cuda::GpuMat*", "cv::cuda::GpuMat*"]), _)]),
pub fn cv_cuda_buildWarpPerspectiveMaps_Mat_bool_Size_GpuMatR_GpuMatR(m: *mut c_void, inverse: bool, dsize: *const core::Size, xmap: *mut c_void, ymap: *mut c_void, ocvrs_return: *mut Result<()>);
// buildWarpPerspectiveMaps(Mat, bool, Size, GpuMat &, GpuMat &, Stream &)(TraitClass, Primitive, SimpleClass, TraitClass, TraitClass, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:212
// ("cv::cuda::buildWarpPerspectiveMaps", vec![(pred!(mut, ["M", "inverse", "dsize", "xmap", "ymap", "stream"], ["cv::Mat", "bool", "cv::Size", "cv::cuda::GpuMat*", "cv::cuda::GpuMat*", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_buildWarpPerspectiveMaps_Mat_bool_Size_GpuMatR_GpuMatR_StreamR(m: *mut c_void, inverse: bool, dsize: *const core::Size, xmap: *mut c_void, ymap: *mut c_void, stream: *mut c_void, ocvrs_return: *mut Result<()>);
// cv::cuda::buildWarpPerspectiveMaps(TraitClass, Primitive, SimpleClass, TraitClass, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:208
// ("cv::cuda::buildWarpPerspectiveMaps", vec![(pred!(mut, ["M", "inverse", "dsize", "xmap", "ymap"], ["cv::UMat", "bool", "cv::Size", "cv::cuda::GpuMat*", "cv::cuda::GpuMat*"]), _)]),
pub fn cv_cuda_buildWarpPerspectiveMaps_UMat_bool_Size_GpuMatR_GpuMatR(m: *mut c_void, inverse: bool, dsize: *const core::Size, xmap: *mut c_void, ymap: *mut c_void, ocvrs_return: *mut Result<()>);
// buildWarpPerspectiveMaps(UMat, bool, Size, GpuMat &, GpuMat &, Stream &)(TraitClass, Primitive, SimpleClass, TraitClass, TraitClass, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:208
// ("cv::cuda::buildWarpPerspectiveMaps", vec![(pred!(mut, ["M", "inverse", "dsize", "xmap", "ymap", "stream"], ["cv::UMat", "bool", "cv::Size", "cv::cuda::GpuMat*", "cv::cuda::GpuMat*", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_buildWarpPerspectiveMaps_UMat_bool_Size_GpuMatR_GpuMatR_StreamR(m: *mut c_void, inverse: bool, dsize: *const core::Size, xmap: *mut c_void, ymap: *mut c_void, stream: *mut c_void, ocvrs_return: *mut Result<()>);
// cv::cuda::buildWarpPerspectiveMaps(InputArray, Primitive, SimpleClass, OutputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:206
// ("cv::cuda::buildWarpPerspectiveMaps", vec![(pred!(mut, ["M", "inverse", "dsize", "xmap", "ymap"], ["const cv::_InputArray*", "bool", "cv::Size", "const cv::_OutputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_cuda_buildWarpPerspectiveMaps_const__InputArrayR_bool_Size_const__OutputArrayR_const__OutputArrayR(m: *const c_void, inverse: bool, dsize: *const core::Size, xmap: *const c_void, ymap: *const c_void, ocvrs_return: *mut Result<()>);
// buildWarpPerspectiveMaps(InputArray, bool, Size, OutputArray, OutputArray, Stream &)(InputArray, Primitive, SimpleClass, OutputArray, OutputArray, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:206
// ("cv::cuda::buildWarpPerspectiveMaps", vec![(pred!(mut, ["M", "inverse", "dsize", "xmap", "ymap", "stream"], ["const cv::_InputArray*", "bool", "cv::Size", "const cv::_OutputArray*", "const cv::_OutputArray*", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_buildWarpPerspectiveMaps_const__InputArrayR_bool_Size_const__OutputArrayR_const__OutputArrayR_StreamR(m: *const c_void, inverse: bool, dsize: *const core::Size, xmap: *const c_void, ymap: *const c_void, stream: *mut c_void, ocvrs_return: *mut Result<()>);
// cv::cuda::pyrDown(InputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:243
// ("cv::cuda::pyrDown", vec![(pred!(mut, ["src", "dst"], ["const cv::_InputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_cuda_pyrDown_const__InputArrayR_const__OutputArrayR(src: *const c_void, dst: *const c_void, ocvrs_return: *mut Result<()>);
// pyrDown(InputArray, OutputArray, Stream &)(InputArray, OutputArray, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:243
// ("cv::cuda::pyrDown", vec![(pred!(mut, ["src", "dst", "stream"], ["const cv::_InputArray*", "const cv::_OutputArray*", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_pyrDown_const__InputArrayR_const__OutputArrayR_StreamR(src: *const c_void, dst: *const c_void, stream: *mut c_void, ocvrs_return: *mut Result<()>);
// cv::cuda::pyrUp(InputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:252
// ("cv::cuda::pyrUp", vec![(pred!(mut, ["src", "dst"], ["const cv::_InputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_cuda_pyrUp_const__InputArrayR_const__OutputArrayR(src: *const c_void, dst: *const c_void, ocvrs_return: *mut Result<()>);
// pyrUp(InputArray, OutputArray, Stream &)(InputArray, OutputArray, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:252
// ("cv::cuda::pyrUp", vec![(pred!(mut, ["src", "dst", "stream"], ["const cv::_InputArray*", "const cv::_OutputArray*", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_pyrUp_const__InputArrayR_const__OutputArrayR_StreamR(src: *const c_void, dst: *const c_void, stream: *mut c_void, ocvrs_return: *mut Result<()>);
// cv::cuda::remap(InputArray, OutputArray, InputArray, InputArray, Primitive) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:92
// ("cv::cuda::remap", vec![(pred!(mut, ["src", "dst", "xmap", "ymap", "interpolation"], ["const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "int"]), _)]),
pub fn cv_cuda_remap_const__InputArrayR_const__OutputArrayR_const__InputArrayR_const__InputArrayR_int(src: *const c_void, dst: *const c_void, xmap: *const c_void, ymap: *const c_void, interpolation: i32, ocvrs_return: *mut Result<()>);
// remap(InputArray, OutputArray, InputArray, InputArray, int, int, Scalar, Stream &)(InputArray, OutputArray, InputArray, InputArray, Primitive, Primitive, SimpleClass, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:92
// ("cv::cuda::remap", vec![(pred!(mut, ["src", "dst", "xmap", "ymap", "interpolation", "borderMode", "borderValue", "stream"], ["const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "int", "int", "cv::Scalar", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_remap_const__InputArrayR_const__OutputArrayR_const__InputArrayR_const__InputArrayR_int_int_Scalar_StreamR(src: *const c_void, dst: *const c_void, xmap: *const c_void, ymap: *const c_void, interpolation: i32, border_mode: i32, border_value: *const core::Scalar, stream: *mut c_void, ocvrs_return: *mut Result<()>);
// cv::cuda::resize(InputArray, OutputArray, SimpleClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:114
// ("cv::cuda::resize", vec![(pred!(mut, ["src", "dst", "dsize"], ["const cv::_InputArray*", "const cv::_OutputArray*", "cv::Size"]), _)]),
pub fn cv_cuda_resize_const__InputArrayR_const__OutputArrayR_Size(src: *const c_void, dst: *const c_void, dsize: *const core::Size, ocvrs_return: *mut Result<()>);
// resize(InputArray, OutputArray, Size, double, double, int, Stream &)(InputArray, OutputArray, SimpleClass, Primitive, Primitive, Primitive, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:114
// ("cv::cuda::resize", vec![(pred!(mut, ["src", "dst", "dsize", "fx", "fy", "interpolation", "stream"], ["const cv::_InputArray*", "const cv::_OutputArray*", "cv::Size", "double", "double", "int", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_resize_const__InputArrayR_const__OutputArrayR_Size_double_double_int_StreamR(src: *const c_void, dst: *const c_void, dsize: *const core::Size, fx: f64, fy: f64, interpolation: i32, stream: *mut c_void, ocvrs_return: *mut Result<()>);
// cv::cuda::rotate(InputArray, OutputArray, SimpleClass, Primitive) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:231
// ("cv::cuda::rotate", vec![(pred!(mut, ["src", "dst", "dsize", "angle"], ["const cv::_InputArray*", "const cv::_OutputArray*", "cv::Size", "double"]), _)]),
pub fn cv_cuda_rotate_const__InputArrayR_const__OutputArrayR_Size_double(src: *const c_void, dst: *const c_void, dsize: *const core::Size, angle: f64, ocvrs_return: *mut Result<()>);
// rotate(InputArray, OutputArray, Size, double, double, double, int, Stream &)(InputArray, OutputArray, SimpleClass, Primitive, Primitive, Primitive, Primitive, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:231
// ("cv::cuda::rotate", vec![(pred!(mut, ["src", "dst", "dsize", "angle", "xShift", "yShift", "interpolation", "stream"], ["const cv::_InputArray*", "const cv::_OutputArray*", "cv::Size", "double", "double", "double", "int", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_rotate_const__InputArrayR_const__OutputArrayR_Size_double_double_double_int_StreamR(src: *const c_void, dst: *const c_void, dsize: *const core::Size, angle: f64, x_shift: f64, y_shift: f64, interpolation: i32, stream: *mut c_void, ocvrs_return: *mut Result<()>);
// cv::cuda::warpAffine(InputArray, OutputArray, TraitClass, SimpleClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:140
// ("cv::cuda::warpAffine", vec![(pred!(mut, ["src", "dst", "M", "dsize"], ["const cv::_InputArray*", "const cv::_OutputArray*", "cv::Mat", "cv::Size"]), _)]),
pub fn cv_cuda_warpAffine_const__InputArrayR_const__OutputArrayR_Mat_Size(src: *const c_void, dst: *const c_void, m: *mut c_void, dsize: *const core::Size, ocvrs_return: *mut Result<()>);
// warpAffine(InputArray, OutputArray, Mat, Size, int, int, Scalar, Stream &)(InputArray, OutputArray, TraitClass, SimpleClass, Primitive, Primitive, SimpleClass, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:140
// ("cv::cuda::warpAffine", vec![(pred!(mut, ["src", "dst", "M", "dsize", "flags", "borderMode", "borderValue", "stream"], ["const cv::_InputArray*", "const cv::_OutputArray*", "cv::Mat", "cv::Size", "int", "int", "cv::Scalar", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_warpAffine_const__InputArrayR_const__OutputArrayR_Mat_Size_int_int_Scalar_StreamR(src: *const c_void, dst: *const c_void, m: *mut c_void, dsize: *const core::Size, flags: i32, border_mode: i32, border_value: *const core::Scalar, stream: *mut c_void, ocvrs_return: *mut Result<()>);
// cv::cuda::warpAffine(InputArray, OutputArray, TraitClass, SimpleClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:135
// ("cv::cuda::warpAffine", vec![(pred!(mut, ["src", "dst", "M", "dsize"], ["const cv::_InputArray*", "const cv::_OutputArray*", "cv::UMat", "cv::Size"]), _)]),
pub fn cv_cuda_warpAffine_const__InputArrayR_const__OutputArrayR_UMat_Size(src: *const c_void, dst: *const c_void, m: *mut c_void, dsize: *const core::Size, ocvrs_return: *mut Result<()>);
// warpAffine(InputArray, OutputArray, UMat, Size, int, int, Scalar, Stream &)(InputArray, OutputArray, TraitClass, SimpleClass, Primitive, Primitive, SimpleClass, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:135
// ("cv::cuda::warpAffine", vec![(pred!(mut, ["src", "dst", "M", "dsize", "flags", "borderMode", "borderValue", "stream"], ["const cv::_InputArray*", "const cv::_OutputArray*", "cv::UMat", "cv::Size", "int", "int", "cv::Scalar", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_warpAffine_const__InputArrayR_const__OutputArrayR_UMat_Size_int_int_Scalar_StreamR(src: *const c_void, dst: *const c_void, m: *mut c_void, dsize: *const core::Size, flags: i32, border_mode: i32, border_value: *const core::Scalar, stream: *mut c_void, ocvrs_return: *mut Result<()>);
// cv::cuda::warpAffine(InputArray, OutputArray, InputArray, SimpleClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:132
// ("cv::cuda::warpAffine", vec![(pred!(mut, ["src", "dst", "M", "dsize"], ["const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_InputArray*", "cv::Size"]), _)]),
pub fn cv_cuda_warpAffine_const__InputArrayR_const__OutputArrayR_const__InputArrayR_Size(src: *const c_void, dst: *const c_void, m: *const c_void, dsize: *const core::Size, ocvrs_return: *mut Result<()>);
// warpAffine(InputArray, OutputArray, InputArray, Size, int, int, Scalar, Stream &)(InputArray, OutputArray, InputArray, SimpleClass, Primitive, Primitive, SimpleClass, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:132
// ("cv::cuda::warpAffine", vec![(pred!(mut, ["src", "dst", "M", "dsize", "flags", "borderMode", "borderValue", "stream"], ["const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_InputArray*", "cv::Size", "int", "int", "cv::Scalar", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_warpAffine_const__InputArrayR_const__OutputArrayR_const__InputArrayR_Size_int_int_Scalar_StreamR(src: *const c_void, dst: *const c_void, m: *const c_void, dsize: *const core::Size, flags: i32, border_mode: i32, border_value: *const core::Scalar, stream: *mut c_void, ocvrs_return: *mut Result<()>);
// cv::cuda::warpPerspective(InputArray, OutputArray, TraitClass, SimpleClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:190
// ("cv::cuda::warpPerspective", vec![(pred!(mut, ["src", "dst", "M", "dsize"], ["const cv::_InputArray*", "const cv::_OutputArray*", "cv::Mat", "cv::Size"]), _)]),
pub fn cv_cuda_warpPerspective_const__InputArrayR_const__OutputArrayR_Mat_Size(src: *const c_void, dst: *const c_void, m: *mut c_void, dsize: *const core::Size, ocvrs_return: *mut Result<()>);
// warpPerspective(InputArray, OutputArray, Mat, Size, int, int, Scalar, Stream &)(InputArray, OutputArray, TraitClass, SimpleClass, Primitive, Primitive, SimpleClass, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:190
// ("cv::cuda::warpPerspective", vec![(pred!(mut, ["src", "dst", "M", "dsize", "flags", "borderMode", "borderValue", "stream"], ["const cv::_InputArray*", "const cv::_OutputArray*", "cv::Mat", "cv::Size", "int", "int", "cv::Scalar", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_warpPerspective_const__InputArrayR_const__OutputArrayR_Mat_Size_int_int_Scalar_StreamR(src: *const c_void, dst: *const c_void, m: *mut c_void, dsize: *const core::Size, flags: i32, border_mode: i32, border_value: *const core::Scalar, stream: *mut c_void, ocvrs_return: *mut Result<()>);
// cv::cuda::warpPerspective(InputArray, OutputArray, TraitClass, SimpleClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:185
// ("cv::cuda::warpPerspective", vec![(pred!(mut, ["src", "dst", "M", "dsize"], ["const cv::_InputArray*", "const cv::_OutputArray*", "cv::UMat", "cv::Size"]), _)]),
pub fn cv_cuda_warpPerspective_const__InputArrayR_const__OutputArrayR_UMat_Size(src: *const c_void, dst: *const c_void, m: *mut c_void, dsize: *const core::Size, ocvrs_return: *mut Result<()>);
// warpPerspective(InputArray, OutputArray, UMat, Size, int, int, Scalar, Stream &)(InputArray, OutputArray, TraitClass, SimpleClass, Primitive, Primitive, SimpleClass, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:185
// ("cv::cuda::warpPerspective", vec![(pred!(mut, ["src", "dst", "M", "dsize", "flags", "borderMode", "borderValue", "stream"], ["const cv::_InputArray*", "const cv::_OutputArray*", "cv::UMat", "cv::Size", "int", "int", "cv::Scalar", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_warpPerspective_const__InputArrayR_const__OutputArrayR_UMat_Size_int_int_Scalar_StreamR(src: *const c_void, dst: *const c_void, m: *mut c_void, dsize: *const core::Size, flags: i32, border_mode: i32, border_value: *const core::Scalar, stream: *mut c_void, ocvrs_return: *mut Result<()>);
// cv::cuda::warpPerspective(InputArray, OutputArray, InputArray, SimpleClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:182
// ("cv::cuda::warpPerspective", vec![(pred!(mut, ["src", "dst", "M", "dsize"], ["const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_InputArray*", "cv::Size"]), _)]),
pub fn cv_cuda_warpPerspective_const__InputArrayR_const__OutputArrayR_const__InputArrayR_Size(src: *const c_void, dst: *const c_void, m: *const c_void, dsize: *const core::Size, ocvrs_return: *mut Result<()>);
// warpPerspective(InputArray, OutputArray, InputArray, Size, int, int, Scalar, Stream &)(InputArray, OutputArray, InputArray, SimpleClass, Primitive, Primitive, SimpleClass, TraitClass) /home/pro/projects/opencv-lib/opencv-4/install/include/opencv4/opencv2/cudawarping.hpp:182
// ("cv::cuda::warpPerspective", vec![(pred!(mut, ["src", "dst", "M", "dsize", "flags", "borderMode", "borderValue", "stream"], ["const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_InputArray*", "cv::Size", "int", "int", "cv::Scalar", "cv::cuda::Stream*"]), _)]),
pub fn cv_cuda_warpPerspective_const__InputArrayR_const__OutputArrayR_const__InputArrayR_Size_int_int_Scalar_StreamR(src: *const c_void, dst: *const c_void, m: *const c_void, dsize: *const core::Size, flags: i32, border_mode: i32, border_value: *const core::Scalar, stream: *mut c_void, ocvrs_return: *mut Result<()>);
