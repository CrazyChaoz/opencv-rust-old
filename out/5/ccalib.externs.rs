// cv::omnidir::calibrate(InputArray, InputArray, SimpleClass, InputOutputArray, InputOutputArray, InputOutputArray, OutputArray, OutputArray, Primitive, SimpleClass) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/omnidir.hpp:176
// ("cv::omnidir::calibrate", vec![(pred!(mut, ["objectPoints", "imagePoints", "size", "K", "xi", "D", "rvecs", "tvecs", "flags", "criteria"], ["const cv::_InputArray*", "const cv::_InputArray*", "cv::Size", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*", "int", "cv::TermCriteria"]), _)]),
pub fn cv_omnidir_calibrate_const__InputArrayR_const__InputArrayR_Size_const__InputOutputArrayR_const__InputOutputArrayR_const__InputOutputArrayR_const__OutputArrayR_const__OutputArrayR_int_TermCriteria(object_points: *const c_void, image_points: *const c_void, size: *const core::Size, k: *const c_void, xi: *const c_void, d: *const c_void, rvecs: *const c_void, tvecs: *const c_void, flags: i32, criteria: *const core::TermCriteria, ocvrs_return: *mut Result<f64>);
// calibrate(InputArrayOfArrays, InputArrayOfArrays, Size, InputOutputArray, InputOutputArray, InputOutputArray, OutputArrayOfArrays, OutputArrayOfArrays, int, TermCriteria, OutputArray)(InputArray, InputArray, SimpleClass, InputOutputArray, InputOutputArray, InputOutputArray, OutputArray, OutputArray, Primitive, SimpleClass, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/omnidir.hpp:176
// ("cv::omnidir::calibrate", vec![(pred!(mut, ["objectPoints", "imagePoints", "size", "K", "xi", "D", "rvecs", "tvecs", "flags", "criteria", "idx"], ["const cv::_InputArray*", "const cv::_InputArray*", "cv::Size", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*", "int", "cv::TermCriteria", "const cv::_OutputArray*"]), _)]),
pub fn cv_omnidir_calibrate_const__InputArrayR_const__InputArrayR_Size_const__InputOutputArrayR_const__InputOutputArrayR_const__InputOutputArrayR_const__OutputArrayR_const__OutputArrayR_int_TermCriteria_const__OutputArrayR(object_points: *const c_void, image_points: *const c_void, size: *const core::Size, k: *const c_void, xi: *const c_void, d: *const c_void, rvecs: *const c_void, tvecs: *const c_void, flags: i32, criteria: *const core::TermCriteria, idx: *const c_void, ocvrs_return: *mut Result<f64>);
// initUndistortRectifyMap(InputArray, InputArray, InputArray, InputArray, InputArray, const cv::Size &, int, OutputArray, OutputArray, int)(InputArray, InputArray, InputArray, InputArray, InputArray, SimpleClass, Primitive, OutputArray, OutputArray, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/omnidir.hpp:141
// ("cv::omnidir::initUndistortRectifyMap", vec![(pred!(mut, ["K", "D", "xi", "R", "P", "size", "m1type", "map1", "map2", "flags"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::Size*", "int", "const cv::_OutputArray*", "const cv::_OutputArray*", "int"]), _)]),
pub fn cv_omnidir_initUndistortRectifyMap_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const_SizeR_int_const__OutputArrayR_const__OutputArrayR_int(k: *const c_void, d: *const c_void, xi: *const c_void, r: *const c_void, p: *const c_void, size: *const core::Size, m1type: i32, map1: *const c_void, map2: *const c_void, flags: i32, ocvrs_return: *mut Result<()>);
// cv::omnidir::projectPoints(InputArray, OutputArray, SimpleClass, InputArray, Primitive, InputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/omnidir.hpp:107
// ("cv::omnidir::projectPoints", vec![(pred!(mut, ["objectPoints", "imagePoints", "affine", "K", "xi", "D"], ["const cv::_InputArray*", "const cv::_OutputArray*", "const cv::Affine3d*", "const cv::_InputArray*", "double", "const cv::_InputArray*"]), _)]),
pub fn cv_omnidir_projectPoints_const__InputArrayR_const__OutputArrayR_const_Affine3dR_const__InputArrayR_double_const__InputArrayR(object_points: *const c_void, image_points: *const c_void, affine: *const core::Affine3d, k: *const c_void, xi: f64, d: *const c_void, ocvrs_return: *mut Result<()>);
// projectPoints(InputArray, OutputArray, const Affine3d &, InputArray, double, InputArray, OutputArray)(InputArray, OutputArray, SimpleClass, InputArray, Primitive, InputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/omnidir.hpp:107
// ("cv::omnidir::projectPoints", vec![(pred!(mut, ["objectPoints", "imagePoints", "affine", "K", "xi", "D", "jacobian"], ["const cv::_InputArray*", "const cv::_OutputArray*", "const cv::Affine3d*", "const cv::_InputArray*", "double", "const cv::_InputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_omnidir_projectPoints_const__InputArrayR_const__OutputArrayR_const_Affine3dR_const__InputArrayR_double_const__InputArrayR_const__OutputArrayR(object_points: *const c_void, image_points: *const c_void, affine: *const core::Affine3d, k: *const c_void, xi: f64, d: *const c_void, jacobian: *const c_void, ocvrs_return: *mut Result<()>);
// cv::omnidir::projectPoints(InputArray, OutputArray, InputArray, InputArray, InputArray, Primitive, InputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/omnidir.hpp:103
// ("cv::omnidir::projectPoints", vec![(pred!(mut, ["objectPoints", "imagePoints", "rvec", "tvec", "K", "xi", "D"], ["const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "double", "const cv::_InputArray*"]), _)]),
pub fn cv_omnidir_projectPoints_const__InputArrayR_const__OutputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_double_const__InputArrayR(object_points: *const c_void, image_points: *const c_void, rvec: *const c_void, tvec: *const c_void, k: *const c_void, xi: f64, d: *const c_void, ocvrs_return: *mut Result<()>);
// projectPoints(InputArray, OutputArray, InputArray, InputArray, InputArray, double, InputArray, OutputArray)(InputArray, OutputArray, InputArray, InputArray, InputArray, Primitive, InputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/omnidir.hpp:103
// ("cv::omnidir::projectPoints", vec![(pred!(mut, ["objectPoints", "imagePoints", "rvec", "tvec", "K", "xi", "D", "jacobian"], ["const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "double", "const cv::_InputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_omnidir_projectPoints_const__InputArrayR_const__OutputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_double_const__InputArrayR_const__OutputArrayR(object_points: *const c_void, image_points: *const c_void, rvec: *const c_void, tvec: *const c_void, k: *const c_void, xi: f64, d: *const c_void, jacobian: *const c_void, ocvrs_return: *mut Result<()>);
// cv::omnidir::stereoCalibrate(InputOutputArray, InputOutputArray, InputOutputArray, SimpleClass, SimpleClass, InputOutputArray, InputOutputArray, InputOutputArray, InputOutputArray, InputOutputArray, InputOutputArray, OutputArray, OutputArray, OutputArray, OutputArray, Primitive, SimpleClass) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/omnidir.hpp:207
// ("cv::omnidir::stereoCalibrate", vec![(pred!(mut, ["objectPoints", "imagePoints1", "imagePoints2", "imageSize1", "imageSize2", "K1", "xi1", "D1", "K2", "xi2", "D2", "rvec", "tvec", "rvecsL", "tvecsL", "flags", "criteria"], ["const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::Size*", "const cv::Size*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*", "int", "cv::TermCriteria"]), _)]),
pub fn cv_omnidir_stereoCalibrate_const__InputOutputArrayR_const__InputOutputArrayR_const__InputOutputArrayR_const_SizeR_const_SizeR_const__InputOutputArrayR_const__InputOutputArrayR_const__InputOutputArrayR_const__InputOutputArrayR_const__InputOutputArrayR_const__InputOutputArrayR_const__OutputArrayR_const__OutputArrayR_const__OutputArrayR_const__OutputArrayR_int_TermCriteria(object_points: *const c_void, image_points1: *const c_void, image_points2: *const c_void, image_size1: *const core::Size, image_size2: *const core::Size, k1: *const c_void, xi1: *const c_void, d1: *const c_void, k2: *const c_void, xi2: *const c_void, d2: *const c_void, rvec: *const c_void, tvec: *const c_void, rvecs_l: *const c_void, tvecs_l: *const c_void, flags: i32, criteria: *const core::TermCriteria, ocvrs_return: *mut Result<f64>);
// stereoCalibrate(InputOutputArrayOfArrays, InputOutputArrayOfArrays, InputOutputArrayOfArrays, const Size &, const Size &, InputOutputArray, InputOutputArray, InputOutputArray, InputOutputArray, InputOutputArray, InputOutputArray, OutputArray, OutputArray, OutputArrayOfArrays, OutputArrayOfArrays, int, TermCriteria, OutputArray)(InputOutputArray, InputOutputArray, InputOutputArray, SimpleClass, SimpleClass, InputOutputArray, InputOutputArray, InputOutputArray, InputOutputArray, InputOutputArray, InputOutputArray, OutputArray, OutputArray, OutputArray, OutputArray, Primitive, SimpleClass, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/omnidir.hpp:207
// ("cv::omnidir::stereoCalibrate", vec![(pred!(mut, ["objectPoints", "imagePoints1", "imagePoints2", "imageSize1", "imageSize2", "K1", "xi1", "D1", "K2", "xi2", "D2", "rvec", "tvec", "rvecsL", "tvecsL", "flags", "criteria", "idx"], ["const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::Size*", "const cv::Size*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*", "int", "cv::TermCriteria", "const cv::_OutputArray*"]), _)]),
pub fn cv_omnidir_stereoCalibrate_const__InputOutputArrayR_const__InputOutputArrayR_const__InputOutputArrayR_const_SizeR_const_SizeR_const__InputOutputArrayR_const__InputOutputArrayR_const__InputOutputArrayR_const__InputOutputArrayR_const__InputOutputArrayR_const__InputOutputArrayR_const__OutputArrayR_const__OutputArrayR_const__OutputArrayR_const__OutputArrayR_int_TermCriteria_const__OutputArrayR(object_points: *const c_void, image_points1: *const c_void, image_points2: *const c_void, image_size1: *const core::Size, image_size2: *const core::Size, k1: *const c_void, xi1: *const c_void, d1: *const c_void, k2: *const c_void, xi2: *const c_void, d2: *const c_void, rvec: *const c_void, tvec: *const c_void, rvecs_l: *const c_void, tvecs_l: *const c_void, flags: i32, criteria: *const core::TermCriteria, idx: *const c_void, ocvrs_return: *mut Result<f64>);
// cv::omnidir::stereoReconstruct(InputArray, InputArray, InputArray, InputArray, InputArray, InputArray, InputArray, InputArray, InputArray, InputArray, Primitive, Primitive, Primitive, OutputArray, OutputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/omnidir.hpp:243
// ("cv::omnidir::stereoReconstruct", vec![(pred!(mut, ["image1", "image2", "K1", "D1", "xi1", "K2", "D2", "xi2", "R", "T", "flag", "numDisparities", "SADWindowSize", "disparity", "image1Rec", "image2Rec"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "int", "int", "int", "const cv::_OutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_omnidir_stereoReconstruct_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_int_int_int_const__OutputArrayR_const__OutputArrayR_const__OutputArrayR(image1: *const c_void, image2: *const c_void, k1: *const c_void, d1: *const c_void, xi1: *const c_void, k2: *const c_void, d2: *const c_void, xi2: *const c_void, r: *const c_void, t: *const c_void, flag: i32, num_disparities: i32, sad_window_size: i32, disparity: *const c_void, image1_rec: *const c_void, image2_rec: *const c_void, ocvrs_return: *mut Result<()>);
// stereoReconstruct(InputArray, InputArray, InputArray, InputArray, InputArray, InputArray, InputArray, InputArray, InputArray, InputArray, int, int, int, OutputArray, OutputArray, OutputArray, const Size &, InputArray, OutputArray, int)(InputArray, InputArray, InputArray, InputArray, InputArray, InputArray, InputArray, InputArray, InputArray, InputArray, Primitive, Primitive, Primitive, OutputArray, OutputArray, OutputArray, SimpleClass, InputArray, OutputArray, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/omnidir.hpp:243
// ("cv::omnidir::stereoReconstruct", vec![(pred!(mut, ["image1", "image2", "K1", "D1", "xi1", "K2", "D2", "xi2", "R", "T", "flag", "numDisparities", "SADWindowSize", "disparity", "image1Rec", "image2Rec", "newSize", "Knew", "pointCloud", "pointType"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "int", "int", "int", "const cv::_OutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*", "const cv::Size*", "const cv::_InputArray*", "const cv::_OutputArray*", "int"]), _)]),
pub fn cv_omnidir_stereoReconstruct_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_int_int_int_const__OutputArrayR_const__OutputArrayR_const__OutputArrayR_const_SizeR_const__InputArrayR_const__OutputArrayR_int(image1: *const c_void, image2: *const c_void, k1: *const c_void, d1: *const c_void, xi1: *const c_void, k2: *const c_void, d2: *const c_void, xi2: *const c_void, r: *const c_void, t: *const c_void, flag: i32, num_disparities: i32, sad_window_size: i32, disparity: *const c_void, image1_rec: *const c_void, image2_rec: *const c_void, new_size: *const core::Size, knew: *const c_void, point_cloud: *const c_void, point_type: i32, ocvrs_return: *mut Result<()>);
// stereoRectify(InputArray, InputArray, OutputArray, OutputArray)(InputArray, InputArray, OutputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/omnidir.hpp:218
// ("cv::omnidir::stereoRectify", vec![(pred!(mut, ["R", "T", "R1", "R2"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_omnidir_stereoRectify_const__InputArrayR_const__InputArrayR_const__OutputArrayR_const__OutputArrayR(r: *const c_void, t: *const c_void, r1: *const c_void, r2: *const c_void, ocvrs_return: *mut Result<()>);
// cv::omnidir::undistortImage(InputArray, OutputArray, InputArray, InputArray, InputArray, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/omnidir.hpp:156
// ("cv::omnidir::undistortImage", vec![(pred!(mut, ["distorted", "undistorted", "K", "D", "xi", "flags"], ["const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "int"]), _)]),
pub fn cv_omnidir_undistortImage_const__InputArrayR_const__OutputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_int(distorted: *const c_void, undistorted: *const c_void, k: *const c_void, d: *const c_void, xi: *const c_void, flags: i32, ocvrs_return: *mut Result<()>);
// undistortImage(InputArray, OutputArray, InputArray, InputArray, InputArray, int, InputArray, const Size &, InputArray)(InputArray, OutputArray, InputArray, InputArray, InputArray, Primitive, InputArray, SimpleClass, InputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/omnidir.hpp:156
// ("cv::omnidir::undistortImage", vec![(pred!(mut, ["distorted", "undistorted", "K", "D", "xi", "flags", "Knew", "new_size", "R"], ["const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "int", "const cv::_InputArray*", "const cv::Size*", "const cv::_InputArray*"]), _)]),
pub fn cv_omnidir_undistortImage_const__InputArrayR_const__OutputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_int_const__InputArrayR_const_SizeR_const__InputArrayR(distorted: *const c_void, undistorted: *const c_void, k: *const c_void, d: *const c_void, xi: *const c_void, flags: i32, knew: *const c_void, new_size: *const core::Size, r: *const c_void, ocvrs_return: *mut Result<()>);
// undistortPoints(InputArray, OutputArray, InputArray, InputArray, InputArray, InputArray)(InputArray, OutputArray, InputArray, InputArray, InputArray, InputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/omnidir.hpp:122
// ("cv::omnidir::undistortPoints", vec![(pred!(mut, ["distorted", "undistorted", "K", "D", "xi", "R"], ["const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*"]), _)]),
pub fn cv_omnidir_undistortPoints_const__InputArrayR_const__OutputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR(distorted: *const c_void, undistorted: *const c_void, k: *const c_void, d: *const c_void, xi: *const c_void, r: *const c_void, ocvrs_return: *mut Result<()>);
// CustomPattern()() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:63
// ("cv::ccalib::CustomPattern::CustomPattern", vec![(pred!(mut, [], []), _)]),
pub fn cv_ccalib_CustomPattern_CustomPattern(ocvrs_return: *mut Result<*mut c_void>);
// create(InputArray, const Size2f, OutputArray)(InputArray, SimpleClass, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:66
// ("cv::ccalib::CustomPattern::create", vec![(pred!(mut, ["pattern", "boardSize", "output"], ["const cv::_InputArray*", "const cv::Size2f", "const cv::_OutputArray*"]), _)]),
pub fn cv_ccalib_CustomPattern_create_const__InputArrayR_const_Size2f_const__OutputArrayR(instance: *mut c_void, pattern: *const c_void, board_size: *const core::Size2f, output: *const c_void, ocvrs_return: *mut Result<bool>);
// cv::ccalib::CustomPattern::create(InputArray, SimpleClass) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:66
// ("cv::ccalib::CustomPattern::create", vec![(pred!(mut, ["pattern", "boardSize"], ["const cv::_InputArray*", "const cv::Size2f"]), _)]),
pub fn cv_ccalib_CustomPattern_create_const__InputArrayR_const_Size2f(instance: *mut c_void, pattern: *const c_void, board_size: *const core::Size2f, ocvrs_return: *mut Result<bool>);
// findPattern(InputArray, OutputArray, OutputArray, const double, const double, const bool, OutputArray, OutputArray, OutputArray)(InputArray, OutputArray, OutputArray, Primitive, Primitive, Primitive, OutputArray, OutputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:68
// ("cv::ccalib::CustomPattern::findPattern", vec![(pred!(mut, ["image", "matched_features", "pattern_points", "ratio", "proj_error", "refine_position", "out", "H", "pattern_corners"], ["const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*", "const double", "const double", "const bool", "const cv::_OutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_ccalib_CustomPattern_findPattern_const__InputArrayR_const__OutputArrayR_const__OutputArrayR_const_double_const_double_const_bool_const__OutputArrayR_const__OutputArrayR_const__OutputArrayR(instance: *mut c_void, image: *const c_void, matched_features: *const c_void, pattern_points: *const c_void, ratio: f64, proj_error: f64, refine_position: bool, out: *const c_void, h: *const c_void, pattern_corners: *const c_void, ocvrs_return: *mut Result<bool>);
// cv::ccalib::CustomPattern::findPattern(InputArray, OutputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:68
// ("cv::ccalib::CustomPattern::findPattern", vec![(pred!(mut, ["image", "matched_features", "pattern_points"], ["const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_ccalib_CustomPattern_findPattern_const__InputArrayR_const__OutputArrayR_const__OutputArrayR(instance: *mut c_void, image: *const c_void, matched_features: *const c_void, pattern_points: *const c_void, ocvrs_return: *mut Result<bool>);
// isInitialized()() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:72
// ("cv::ccalib::CustomPattern::isInitialized", vec![(pred!(mut, [], []), _)]),
pub fn cv_ccalib_CustomPattern_isInitialized(instance: *mut c_void, ocvrs_return: *mut Result<bool>);
// getPatternPoints(std::vector<KeyPoint> &)(CppPassByVoidPtr) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:74
// ("cv::ccalib::CustomPattern::getPatternPoints", vec![(pred!(mut, ["original_points"], ["std::vector<cv::KeyPoint>*"]), _)]),
pub fn cv_ccalib_CustomPattern_getPatternPoints_vectorLKeyPointGR(instance: *mut c_void, original_points: *mut c_void, ocvrs_return: *mut Result<()>);
// getPixelSize()() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:78
// ("cv::ccalib::CustomPattern::getPixelSize", vec![(pred!(mut, [], []), _)]),
pub fn cv_ccalib_CustomPattern_getPixelSize(instance: *mut c_void, ocvrs_return: *mut Result<f64>);
// setFeatureDetector(Ptr<FeatureDetector>)(CppPassByVoidPtr) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:83
// ("cv::ccalib::CustomPattern::setFeatureDetector", vec![(pred!(mut, ["featureDetector"], ["cv::Ptr<cv::Feature2D>"]), _)]),
pub fn cv_ccalib_CustomPattern_setFeatureDetector_PtrLFeature2DG(instance: *mut c_void, feature_detector: *mut c_void, ocvrs_return: *mut Result<bool>);
// setDescriptorExtractor(Ptr<DescriptorExtractor>)(CppPassByVoidPtr) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:84
// ("cv::ccalib::CustomPattern::setDescriptorExtractor", vec![(pred!(mut, ["extractor"], ["cv::Ptr<cv::Feature2D>"]), _)]),
pub fn cv_ccalib_CustomPattern_setDescriptorExtractor_PtrLFeature2DG(instance: *mut c_void, extractor: *mut c_void, ocvrs_return: *mut Result<bool>);
// setDescriptorMatcher(Ptr<DescriptorMatcher>)(CppPassByVoidPtr) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:85
// ("cv::ccalib::CustomPattern::setDescriptorMatcher", vec![(pred!(mut, ["matcher"], ["cv::Ptr<cv::DescriptorMatcher>"]), _)]),
pub fn cv_ccalib_CustomPattern_setDescriptorMatcher_PtrLDescriptorMatcherG(instance: *mut c_void, matcher: *mut c_void, ocvrs_return: *mut Result<bool>);
// getFeatureDetector()() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:87
// ("cv::ccalib::CustomPattern::getFeatureDetector", vec![(pred!(mut, [], []), _)]),
pub fn cv_ccalib_CustomPattern_getFeatureDetector(instance: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
// getDescriptorExtractor()() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:88
// ("cv::ccalib::CustomPattern::getDescriptorExtractor", vec![(pred!(mut, [], []), _)]),
pub fn cv_ccalib_CustomPattern_getDescriptorExtractor(instance: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
// getDescriptorMatcher()() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:89
// ("cv::ccalib::CustomPattern::getDescriptorMatcher", vec![(pred!(mut, [], []), _)]),
pub fn cv_ccalib_CustomPattern_getDescriptorMatcher(instance: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
// calibrate(InputArrayOfArrays, InputArrayOfArrays, Size, InputOutputArray, InputOutputArray, OutputArrayOfArrays, OutputArrayOfArrays, int, TermCriteria)(InputArray, InputArray, SimpleClass, InputOutputArray, InputOutputArray, OutputArray, OutputArray, Primitive, SimpleClass) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:91
// ("cv::ccalib::CustomPattern::calibrate", vec![(pred!(mut, ["objectPoints", "imagePoints", "imageSize", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "flags", "criteria"], ["const cv::_InputArray*", "const cv::_InputArray*", "cv::Size", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*", "int", "cv::TermCriteria"]), _)]),
pub fn cv_ccalib_CustomPattern_calibrate_const__InputArrayR_const__InputArrayR_Size_const__InputOutputArrayR_const__InputOutputArrayR_const__OutputArrayR_const__OutputArrayR_int_TermCriteria(instance: *mut c_void, object_points: *const c_void, image_points: *const c_void, image_size: *const core::Size, camera_matrix: *const c_void, dist_coeffs: *const c_void, rvecs: *const c_void, tvecs: *const c_void, flags: i32, criteria: *const core::TermCriteria, ocvrs_return: *mut Result<f64>);
// cv::ccalib::CustomPattern::calibrate(InputArray, InputArray, SimpleClass, InputOutputArray, InputOutputArray, OutputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:91
// ("cv::ccalib::CustomPattern::calibrate", vec![(pred!(mut, ["objectPoints", "imagePoints", "imageSize", "cameraMatrix", "distCoeffs", "rvecs", "tvecs"], ["const cv::_InputArray*", "const cv::_InputArray*", "cv::Size", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_ccalib_CustomPattern_calibrate_const__InputArrayR_const__InputArrayR_Size_const__InputOutputArrayR_const__InputOutputArrayR_const__OutputArrayR_const__OutputArrayR(instance: *mut c_void, object_points: *const c_void, image_points: *const c_void, image_size: *const core::Size, camera_matrix: *const c_void, dist_coeffs: *const c_void, rvecs: *const c_void, tvecs: *const c_void, ocvrs_return: *mut Result<f64>);
// findRt(InputArray, InputArray, InputArray, InputArray, InputOutputArray, InputOutputArray, bool, int)(InputArray, InputArray, InputArray, InputArray, InputOutputArray, InputOutputArray, Primitive, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:99
// ("cv::ccalib::CustomPattern::findRt", vec![(pred!(mut, ["objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "useExtrinsicGuess", "flags"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "bool", "int"]), _)]),
pub fn cv_ccalib_CustomPattern_findRt_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputOutputArrayR_const__InputOutputArrayR_bool_int(instance: *mut c_void, object_points: *const c_void, image_points: *const c_void, camera_matrix: *const c_void, dist_coeffs: *const c_void, rvec: *const c_void, tvec: *const c_void, use_extrinsic_guess: bool, flags: i32, ocvrs_return: *mut Result<bool>);
// cv::ccalib::CustomPattern::findRt(InputArray, InputArray, InputArray, InputArray, InputOutputArray, InputOutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:99
// ("cv::ccalib::CustomPattern::findRt", vec![(pred!(mut, ["objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*"]), _)]),
pub fn cv_ccalib_CustomPattern_findRt_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputOutputArrayR_const__InputOutputArrayR(instance: *mut c_void, object_points: *const c_void, image_points: *const c_void, camera_matrix: *const c_void, dist_coeffs: *const c_void, rvec: *const c_void, tvec: *const c_void, ocvrs_return: *mut Result<bool>);
// findRt(InputArray, InputArray, InputArray, InputOutputArray, InputOutputArray, bool, int)(InputArray, InputArray, InputArray, InputOutputArray, InputOutputArray, Primitive, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:101
// ("cv::ccalib::CustomPattern::findRt", vec![(pred!(mut, ["image", "cameraMatrix", "distCoeffs", "rvec", "tvec", "useExtrinsicGuess", "flags"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "bool", "int"]), _)]),
pub fn cv_ccalib_CustomPattern_findRt_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputOutputArrayR_const__InputOutputArrayR_bool_int(instance: *mut c_void, image: *const c_void, camera_matrix: *const c_void, dist_coeffs: *const c_void, rvec: *const c_void, tvec: *const c_void, use_extrinsic_guess: bool, flags: i32, ocvrs_return: *mut Result<bool>);
// cv::ccalib::CustomPattern::findRt(InputArray, InputArray, InputArray, InputOutputArray, InputOutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:101
// ("cv::ccalib::CustomPattern::findRt", vec![(pred!(mut, ["image", "cameraMatrix", "distCoeffs", "rvec", "tvec"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*"]), _)]),
pub fn cv_ccalib_CustomPattern_findRt_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputOutputArrayR_const__InputOutputArrayR(instance: *mut c_void, image: *const c_void, camera_matrix: *const c_void, dist_coeffs: *const c_void, rvec: *const c_void, tvec: *const c_void, ocvrs_return: *mut Result<bool>);
// findRtRANSAC(InputArray, InputArray, InputArray, InputArray, InputOutputArray, InputOutputArray, bool, int, float, int, OutputArray, int)(InputArray, InputArray, InputArray, InputArray, InputOutputArray, InputOutputArray, Primitive, Primitive, Primitive, Primitive, OutputArray, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:108
// ("cv::ccalib::CustomPattern::findRtRANSAC", vec![(pred!(mut, ["objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "useExtrinsicGuess", "iterationsCount", "reprojectionError", "minInliersCount", "inliers", "flags"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "bool", "int", "float", "int", "const cv::_OutputArray*", "int"]), _)]),
pub fn cv_ccalib_CustomPattern_findRtRANSAC_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputOutputArrayR_const__InputOutputArrayR_bool_int_float_int_const__OutputArrayR_int(instance: *mut c_void, object_points: *const c_void, image_points: *const c_void, camera_matrix: *const c_void, dist_coeffs: *const c_void, rvec: *const c_void, tvec: *const c_void, use_extrinsic_guess: bool, iterations_count: i32, reprojection_error: f32, min_inliers_count: i32, inliers: *const c_void, flags: i32, ocvrs_return: *mut Result<bool>);
// cv::ccalib::CustomPattern::findRtRANSAC(InputArray, InputArray, InputArray, InputArray, InputOutputArray, InputOutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:108
// ("cv::ccalib::CustomPattern::findRtRANSAC", vec![(pred!(mut, ["objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*"]), _)]),
pub fn cv_ccalib_CustomPattern_findRtRANSAC_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputOutputArrayR_const__InputOutputArrayR(instance: *mut c_void, object_points: *const c_void, image_points: *const c_void, camera_matrix: *const c_void, dist_coeffs: *const c_void, rvec: *const c_void, tvec: *const c_void, ocvrs_return: *mut Result<bool>);
// findRtRANSAC(InputArray, InputArray, InputArray, InputOutputArray, InputOutputArray, bool, int, float, int, OutputArray, int)(InputArray, InputArray, InputArray, InputOutputArray, InputOutputArray, Primitive, Primitive, Primitive, Primitive, OutputArray, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:111
// ("cv::ccalib::CustomPattern::findRtRANSAC", vec![(pred!(mut, ["image", "cameraMatrix", "distCoeffs", "rvec", "tvec", "useExtrinsicGuess", "iterationsCount", "reprojectionError", "minInliersCount", "inliers", "flags"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*", "bool", "int", "float", "int", "const cv::_OutputArray*", "int"]), _)]),
pub fn cv_ccalib_CustomPattern_findRtRANSAC_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputOutputArrayR_const__InputOutputArrayR_bool_int_float_int_const__OutputArrayR_int(instance: *mut c_void, image: *const c_void, camera_matrix: *const c_void, dist_coeffs: *const c_void, rvec: *const c_void, tvec: *const c_void, use_extrinsic_guess: bool, iterations_count: i32, reprojection_error: f32, min_inliers_count: i32, inliers: *const c_void, flags: i32, ocvrs_return: *mut Result<bool>);
// cv::ccalib::CustomPattern::findRtRANSAC(InputArray, InputArray, InputArray, InputOutputArray, InputOutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:111
// ("cv::ccalib::CustomPattern::findRtRANSAC", vec![(pred!(mut, ["image", "cameraMatrix", "distCoeffs", "rvec", "tvec"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputOutputArray*", "const cv::_InputOutputArray*"]), _)]),
pub fn cv_ccalib_CustomPattern_findRtRANSAC_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputOutputArrayR_const__InputOutputArrayR(instance: *mut c_void, image: *const c_void, camera_matrix: *const c_void, dist_coeffs: *const c_void, rvec: *const c_void, tvec: *const c_void, ocvrs_return: *mut Result<bool>);
// drawOrientation(InputOutputArray, InputArray, InputArray, InputArray, InputArray, double, int)(InputOutputArray, InputArray, InputArray, InputArray, InputArray, Primitive, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:118
// ("cv::ccalib::CustomPattern::drawOrientation", vec![(pred!(mut, ["image", "tvec", "rvec", "cameraMatrix", "distCoeffs", "axis_length", "axis_width"], ["const cv::_InputOutputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "double", "int"]), _)]),
pub fn cv_ccalib_CustomPattern_drawOrientation_const__InputOutputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_double_int(instance: *mut c_void, image: *const c_void, tvec: *const c_void, rvec: *const c_void, camera_matrix: *const c_void, dist_coeffs: *const c_void, axis_length: f64, axis_width: i32, ocvrs_return: *mut Result<()>);
// cv::ccalib::CustomPattern::drawOrientation(InputOutputArray, InputArray, InputArray, InputArray, InputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib.hpp:118
// ("cv::ccalib::CustomPattern::drawOrientation", vec![(pred!(mut, ["image", "tvec", "rvec", "cameraMatrix", "distCoeffs"], ["const cv::_InputOutputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*", "const cv::_InputArray*"]), _)]),
pub fn cv_ccalib_CustomPattern_drawOrientation_const__InputOutputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR_const__InputArrayR(instance: *mut c_void, image: *const c_void, tvec: *const c_void, rvec: *const c_void, camera_matrix: *const c_void, dist_coeffs: *const c_void, ocvrs_return: *mut Result<()>);
// cv::ccalib::CustomPattern::to_Algorithm() generated
// ("cv::ccalib::CustomPattern::to_Algorithm", vec![(pred!(mut, [], []), _)]),
pub fn cv_ccalib_CustomPattern_to_Algorithm(instance: *mut c_void) -> *mut c_void;
// cv::ccalib::CustomPattern::delete() generated
// ("cv::ccalib::CustomPattern::delete", vec![(pred!(mut, [], []), _)]),
pub fn cv_ccalib_CustomPattern_delete(instance: *mut c_void);
// MultiCameraCalibration(int, int, const std::string &, float, float, int, int, int, int, TermCriteria, Ptr<FeatureDetector>, Ptr<DescriptorExtractor>, Ptr<DescriptorMatcher>)(Primitive, Primitive, InString, Primitive, Primitive, Primitive, Primitive, Primitive, Primitive, SimpleClass, CppPassByVoidPtr, CppPassByVoidPtr, CppPassByVoidPtr) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:132
// ("cv::multicalib::MultiCameraCalibration::MultiCameraCalibration", vec![(pred!(mut, ["cameraType", "nCameras", "fileName", "patternWidth", "patternHeight", "verbose", "showExtration", "nMiniMatches", "flags", "criteria", "detector", "descriptor", "matcher"], ["int", "int", "const std::string*", "float", "float", "int", "int", "int", "int", "cv::TermCriteria", "cv::Ptr<cv::Feature2D>", "cv::Ptr<cv::Feature2D>", "cv::Ptr<cv::DescriptorMatcher>"]), _)]),
pub fn cv_multicalib_MultiCameraCalibration_MultiCameraCalibration_int_int_const_stringR_float_float_int_int_int_int_TermCriteria_PtrLFeature2DG_PtrLFeature2DG_PtrLDescriptorMatcherG(camera_type: i32, n_cameras: i32, file_name: *const c_char, pattern_width: f32, pattern_height: f32, verbose: i32, show_extration: i32, n_mini_matches: i32, flags: i32, criteria: *const core::TermCriteria, detector: *mut c_void, descriptor: *mut c_void, matcher: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
// cv::multicalib::MultiCameraCalibration::MultiCameraCalibration(Primitive, Primitive, InString, Primitive, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:132
// ("cv::multicalib::MultiCameraCalibration::MultiCameraCalibration", vec![(pred!(mut, ["cameraType", "nCameras", "fileName", "patternWidth", "patternHeight"], ["int", "int", "const std::string*", "float", "float"]), _)]),
pub fn cv_multicalib_MultiCameraCalibration_MultiCameraCalibration_int_int_const_stringR_float_float(camera_type: i32, n_cameras: i32, file_name: *const c_char, pattern_width: f32, pattern_height: f32, ocvrs_return: *mut Result<*mut c_void>);
// loadImages()() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:141
// ("cv::multicalib::MultiCameraCalibration::loadImages", vec![(pred!(mut, [], []), _)]),
pub fn cv_multicalib_MultiCameraCalibration_loadImages(instance: *mut c_void, ocvrs_return: *mut Result<()>);
// initialize()() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:145
// ("cv::multicalib::MultiCameraCalibration::initialize", vec![(pred!(mut, [], []), _)]),
pub fn cv_multicalib_MultiCameraCalibration_initialize(instance: *mut c_void, ocvrs_return: *mut Result<()>);
// optimizeExtrinsics()() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:149
// ("cv::multicalib::MultiCameraCalibration::optimizeExtrinsics", vec![(pred!(mut, [], []), _)]),
pub fn cv_multicalib_MultiCameraCalibration_optimizeExtrinsics(instance: *mut c_void, ocvrs_return: *mut Result<f64>);
// run()() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:153
// ("cv::multicalib::MultiCameraCalibration::run", vec![(pred!(mut, [], []), _)]),
pub fn cv_multicalib_MultiCameraCalibration_run(instance: *mut c_void, ocvrs_return: *mut Result<f64>);
// writeParameters(const std::string &)(InString) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:157
// ("cv::multicalib::MultiCameraCalibration::writeParameters", vec![(pred!(mut, ["filename"], ["const std::string*"]), _)]),
pub fn cv_multicalib_MultiCameraCalibration_writeParameters_const_stringR(instance: *mut c_void, filename: *const c_char, ocvrs_return: *mut Result<()>);
// cv::multicalib::MultiCameraCalibration::delete() generated
// ("cv::multicalib::MultiCameraCalibration::delete", vec![(pred!(mut, [], []), _)]),
pub fn cv_multicalib_MultiCameraCalibration_delete(instance: *mut c_void);
// edge(int, int, int, Mat)(Primitive, Primitive, Primitive, TraitClass) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:89
// ("cv::multicalib::MultiCameraCalibration::edge::edge", vec![(pred!(mut, ["cv", "pv", "pi", "trans"], ["int", "int", "int", "cv::Mat"]), _)]),
pub fn cv_multicalib_MultiCameraCalibration_edge_edge_int_int_int_Mat(cv: i32, pv: i32, pi: i32, trans: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
// cv::multicalib::MultiCameraCalibration::edge::cameraVertex() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:84
// ("cv::multicalib::MultiCameraCalibration::edge::cameraVertex", vec![(pred!(const, [], []), _)]),
pub fn cv_multicalib_MultiCameraCalibration_edge_propCameraVertex_const(instance: *const c_void) -> i32;
// cv::multicalib::MultiCameraCalibration::edge::setCameraVertex(Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:84
// ("cv::multicalib::MultiCameraCalibration::edge::setCameraVertex", vec![(pred!(mut, ["val"], ["const int"]), _)]),
pub fn cv_multicalib_MultiCameraCalibration_edge_propCameraVertex_const_int(instance: *mut c_void, val: i32);
// cv::multicalib::MultiCameraCalibration::edge::photoVertex() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:85
// ("cv::multicalib::MultiCameraCalibration::edge::photoVertex", vec![(pred!(const, [], []), _)]),
pub fn cv_multicalib_MultiCameraCalibration_edge_propPhotoVertex_const(instance: *const c_void) -> i32;
// cv::multicalib::MultiCameraCalibration::edge::setPhotoVertex(Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:85
// ("cv::multicalib::MultiCameraCalibration::edge::setPhotoVertex", vec![(pred!(mut, ["val"], ["const int"]), _)]),
pub fn cv_multicalib_MultiCameraCalibration_edge_propPhotoVertex_const_int(instance: *mut c_void, val: i32);
// cv::multicalib::MultiCameraCalibration::edge::photoIndex() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:86
// ("cv::multicalib::MultiCameraCalibration::edge::photoIndex", vec![(pred!(const, [], []), _)]),
pub fn cv_multicalib_MultiCameraCalibration_edge_propPhotoIndex_const(instance: *const c_void) -> i32;
// cv::multicalib::MultiCameraCalibration::edge::setPhotoIndex(Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:86
// ("cv::multicalib::MultiCameraCalibration::edge::setPhotoIndex", vec![(pred!(mut, ["val"], ["const int"]), _)]),
pub fn cv_multicalib_MultiCameraCalibration_edge_propPhotoIndex_const_int(instance: *mut c_void, val: i32);
// cv::multicalib::MultiCameraCalibration::edge::transform() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:87
// ("cv::multicalib::MultiCameraCalibration::edge::transform", vec![(pred!(const, [], []), _)]),
pub fn cv_multicalib_MultiCameraCalibration_edge_propTransform_const(instance: *const c_void) -> *mut c_void;
// cv::multicalib::MultiCameraCalibration::edge::setTransform(TraitClass) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:87
// ("cv::multicalib::MultiCameraCalibration::edge::setTransform", vec![(pred!(mut, ["val"], ["const cv::Mat"]), _)]),
pub fn cv_multicalib_MultiCameraCalibration_edge_propTransform_const_Mat(instance: *mut c_void, val: *const c_void);
// cv::multicalib::MultiCameraCalibration::edge::delete() generated
// ("cv::multicalib::MultiCameraCalibration::edge::delete", vec![(pred!(mut, [], []), _)]),
pub fn cv_multicalib_MultiCameraCalibration_edge_delete(instance: *mut c_void);
// vertex(Mat, int)(TraitClass, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:105
// ("cv::multicalib::MultiCameraCalibration::vertex::vertex", vec![(pred!(mut, ["po", "ts"], ["cv::Mat", "int"]), _)]),
pub fn cv_multicalib_MultiCameraCalibration_vertex_vertex_Mat_int(po: *mut c_void, ts: i32, ocvrs_return: *mut Result<*mut c_void>);
// vertex()() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:111
// ("cv::multicalib::MultiCameraCalibration::vertex::vertex", vec![(pred!(mut, [], []), _)]),
pub fn cv_multicalib_MultiCameraCalibration_vertex_vertex(ocvrs_return: *mut Result<*mut c_void>);
// cv::multicalib::MultiCameraCalibration::vertex::pose() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:100
// ("cv::multicalib::MultiCameraCalibration::vertex::pose", vec![(pred!(const, [], []), _)]),
pub fn cv_multicalib_MultiCameraCalibration_vertex_propPose_const(instance: *const c_void) -> *mut c_void;
// cv::multicalib::MultiCameraCalibration::vertex::setPose(TraitClass) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:100
// ("cv::multicalib::MultiCameraCalibration::vertex::setPose", vec![(pred!(mut, ["val"], ["const cv::Mat"]), _)]),
pub fn cv_multicalib_MultiCameraCalibration_vertex_propPose_const_Mat(instance: *mut c_void, val: *const c_void);
// cv::multicalib::MultiCameraCalibration::vertex::timestamp() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:103
// ("cv::multicalib::MultiCameraCalibration::vertex::timestamp", vec![(pred!(const, [], []), _)]),
pub fn cv_multicalib_MultiCameraCalibration_vertex_propTimestamp_const(instance: *const c_void) -> i32;
// cv::multicalib::MultiCameraCalibration::vertex::setTimestamp(Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/multicalib.hpp:103
// ("cv::multicalib::MultiCameraCalibration::vertex::setTimestamp", vec![(pred!(mut, ["val"], ["const int"]), _)]),
pub fn cv_multicalib_MultiCameraCalibration_vertex_propTimestamp_const_int(instance: *mut c_void, val: i32);
// cv::multicalib::MultiCameraCalibration::vertex::delete() generated
// ("cv::multicalib::MultiCameraCalibration::vertex::delete", vec![(pred!(mut, [], []), _)]),
pub fn cv_multicalib_MultiCameraCalibration_vertex_delete(instance: *mut c_void);
// RandomPatternCornerFinder(float, float, int, int, int, int, Ptr<FeatureDetector>, Ptr<DescriptorExtractor>, Ptr<DescriptorMatcher>)(Primitive, Primitive, Primitive, Primitive, Primitive, Primitive, CppPassByVoidPtr, CppPassByVoidPtr, CppPassByVoidPtr) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/randpattern.hpp:81
// ("cv::randpattern::RandomPatternCornerFinder::RandomPatternCornerFinder", vec![(pred!(mut, ["patternWidth", "patternHeight", "nminiMatch", "depth", "verbose", "showExtraction", "detector", "descriptor", "matcher"], ["float", "float", "int", "int", "int", "int", "cv::Ptr<cv::Feature2D>", "cv::Ptr<cv::Feature2D>", "cv::Ptr<cv::DescriptorMatcher>"]), _)]),
pub fn cv_randpattern_RandomPatternCornerFinder_RandomPatternCornerFinder_float_float_int_int_int_int_PtrLFeature2DG_PtrLFeature2DG_PtrLDescriptorMatcherG(pattern_width: f32, pattern_height: f32, nmini_match: i32, depth: i32, verbose: i32, show_extraction: i32, detector: *mut c_void, descriptor: *mut c_void, matcher: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
// cv::randpattern::RandomPatternCornerFinder::RandomPatternCornerFinder(Primitive, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/randpattern.hpp:81
// ("cv::randpattern::RandomPatternCornerFinder::RandomPatternCornerFinder", vec![(pred!(mut, ["patternWidth", "patternHeight"], ["float", "float"]), _)]),
pub fn cv_randpattern_RandomPatternCornerFinder_RandomPatternCornerFinder_float_float(pattern_width: f32, pattern_height: f32, ocvrs_return: *mut Result<*mut c_void>);
// loadPattern(const cv::Mat &)(TraitClass) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/randpattern.hpp:90
// ("cv::randpattern::RandomPatternCornerFinder::loadPattern", vec![(pred!(mut, ["patternImage"], ["const cv::Mat*"]), _)]),
pub fn cv_randpattern_RandomPatternCornerFinder_loadPattern_const_MatR(instance: *mut c_void, pattern_image: *const c_void, ocvrs_return: *mut Result<()>);
// loadPattern(const cv::Mat &, const std::vector<cv::KeyPoint> &, const cv::Mat &)(TraitClass, CppPassByVoidPtr, TraitClass) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/randpattern.hpp:97
// ("cv::randpattern::RandomPatternCornerFinder::loadPattern", vec![(pred!(mut, ["patternImage", "patternKeyPoints", "patternDescriptors"], ["const cv::Mat*", "const std::vector<cv::KeyPoint>*", "const cv::Mat*"]), _)]),
pub fn cv_randpattern_RandomPatternCornerFinder_loadPattern_const_MatR_const_vectorLKeyPointGR_const_MatR(instance: *mut c_void, pattern_image: *const c_void, pattern_key_points: *const c_void, pattern_descriptors: *const c_void, ocvrs_return: *mut Result<()>);
// computeObjectImagePoints(std::vector<cv::Mat>)(CppPassByVoidPtr) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/randpattern.hpp:106
// ("cv::randpattern::RandomPatternCornerFinder::computeObjectImagePoints", vec![(pred!(mut, ["inputImages"], ["std::vector<cv::Mat>"]), _)]),
pub fn cv_randpattern_RandomPatternCornerFinder_computeObjectImagePoints_vectorLMatG(instance: *mut c_void, input_images: *mut c_void, ocvrs_return: *mut Result<()>);
// computeObjectImagePointsForSingle(cv::Mat)(TraitClass) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/randpattern.hpp:115
// ("cv::randpattern::RandomPatternCornerFinder::computeObjectImagePointsForSingle", vec![(pred!(mut, ["inputImage"], ["cv::Mat"]), _)]),
pub fn cv_randpattern_RandomPatternCornerFinder_computeObjectImagePointsForSingle_Mat(instance: *mut c_void, input_image: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
// getObjectPoints()() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/randpattern.hpp:119
// ("cv::randpattern::RandomPatternCornerFinder::getObjectPoints", vec![(pred!(mut, [], []), _)]),
pub fn cv_randpattern_RandomPatternCornerFinder_getObjectPoints(instance: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
// getImagePoints()() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/randpattern.hpp:123
// ("cv::randpattern::RandomPatternCornerFinder::getImagePoints", vec![(pred!(mut, [], []), _)]),
pub fn cv_randpattern_RandomPatternCornerFinder_getImagePoints(instance: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
// cv::randpattern::RandomPatternCornerFinder::delete() generated
// ("cv::randpattern::RandomPatternCornerFinder::delete", vec![(pred!(mut, [], []), _)]),
pub fn cv_randpattern_RandomPatternCornerFinder_delete(instance: *mut c_void);
// RandomPatternGenerator(int, int)(Primitive, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/randpattern.hpp:169
// ("cv::randpattern::RandomPatternGenerator::RandomPatternGenerator", vec![(pred!(mut, ["imageWidth", "imageHeight"], ["int", "int"]), _)]),
pub fn cv_randpattern_RandomPatternGenerator_RandomPatternGenerator_int_int(image_width: i32, image_height: i32, ocvrs_return: *mut Result<*mut c_void>);
// generatePattern()() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/randpattern.hpp:173
// ("cv::randpattern::RandomPatternGenerator::generatePattern", vec![(pred!(mut, [], []), _)]),
pub fn cv_randpattern_RandomPatternGenerator_generatePattern(instance: *mut c_void, ocvrs_return: *mut Result<()>);
// getPattern()() /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/ccalib/randpattern.hpp:176
// ("cv::randpattern::RandomPatternGenerator::getPattern", vec![(pred!(mut, [], []), _)]),
pub fn cv_randpattern_RandomPatternGenerator_getPattern(instance: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
// cv::randpattern::RandomPatternGenerator::delete() generated
// ("cv::randpattern::RandomPatternGenerator::delete", vec![(pred!(mut, [], []), _)]),
pub fn cv_randpattern_RandomPatternGenerator_delete(instance: *mut c_void);
