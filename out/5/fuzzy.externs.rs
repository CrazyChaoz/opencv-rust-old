// FT02D_FL_process(InputArray, const int, OutputArray)(InputArray, Primitive, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_F0_math.hpp:106
// ("cv::ft::FT02D_FL_process", vec![(pred!(mut, ["matrix", "radius", "output"], ["const cv::_InputArray*", "const int", "const cv::_OutputArray*"]), _)]),
pub fn cv_ft_FT02D_FL_process_const__InputArrayR_const_int_const__OutputArrayR(matrix: *const c_void, radius: i32, output: *const c_void, ocvrs_return: *mut Result<()>);
// FT02D_FL_process_float(InputArray, const int, OutputArray)(InputArray, Primitive, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_F0_math.hpp:115
// ("cv::ft::FT02D_FL_process_float", vec![(pred!(mut, ["matrix", "radius", "output"], ["const cv::_InputArray*", "const int", "const cv::_OutputArray*"]), _)]),
pub fn cv_ft_FT02D_FL_process_float_const__InputArrayR_const_int_const__OutputArrayR(matrix: *const c_void, radius: i32, output: *const c_void, ocvrs_return: *mut Result<()>);
// cv::ft::FT02D_components(InputArray, InputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_F0_math.hpp:64
// ("cv::ft::FT02D_components", vec![(pred!(mut, ["matrix", "kernel", "components"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_ft_FT02D_components_const__InputArrayR_const__InputArrayR_const__OutputArrayR(matrix: *const c_void, kernel: *const c_void, components: *const c_void, ocvrs_return: *mut Result<()>);
// FT02D_components(InputArray, InputArray, OutputArray, InputArray)(InputArray, InputArray, OutputArray, InputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_F0_math.hpp:64
// ("cv::ft::FT02D_components", vec![(pred!(mut, ["matrix", "kernel", "components", "mask"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_InputArray*"]), _)]),
pub fn cv_ft_FT02D_components_const__InputArrayR_const__InputArrayR_const__OutputArrayR_const__InputArrayR(matrix: *const c_void, kernel: *const c_void, components: *const c_void, mask: *const c_void, ocvrs_return: *mut Result<()>);
// FT02D_inverseFT(InputArray, InputArray, OutputArray, int, int)(InputArray, InputArray, OutputArray, Primitive, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_F0_math.hpp:75
// ("cv::ft::FT02D_inverseFT", vec![(pred!(mut, ["components", "kernel", "output", "width", "height"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_OutputArray*", "int", "int"]), _)]),
pub fn cv_ft_FT02D_inverseFT_const__InputArrayR_const__InputArrayR_const__OutputArrayR_int_int(components: *const c_void, kernel: *const c_void, output: *const c_void, width: i32, height: i32, ocvrs_return: *mut Result<()>);
// FT02D_iteration(InputArray, InputArray, OutputArray, InputArray, OutputArray, bool)(InputArray, InputArray, OutputArray, InputArray, OutputArray, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_F0_math.hpp:97
// ("cv::ft::FT02D_iteration", vec![(pred!(mut, ["matrix", "kernel", "output", "mask", "maskOutput", "firstStop"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_InputArray*", "const cv::_OutputArray*", "bool"]), _)]),
pub fn cv_ft_FT02D_iteration_const__InputArrayR_const__InputArrayR_const__OutputArrayR_const__InputArrayR_const__OutputArrayR_bool(matrix: *const c_void, kernel: *const c_void, output: *const c_void, mask: *const c_void, mask_output: *const c_void, first_stop: bool, ocvrs_return: *mut Result<i32>);
// cv::ft::FT02D_process(InputArray, InputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_F0_math.hpp:85
// ("cv::ft::FT02D_process", vec![(pred!(mut, ["matrix", "kernel", "output"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_ft_FT02D_process_const__InputArrayR_const__InputArrayR_const__OutputArrayR(matrix: *const c_void, kernel: *const c_void, output: *const c_void, ocvrs_return: *mut Result<()>);
// FT02D_process(InputArray, InputArray, OutputArray, InputArray)(InputArray, InputArray, OutputArray, InputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_F0_math.hpp:85
// ("cv::ft::FT02D_process", vec![(pred!(mut, ["matrix", "kernel", "output", "mask"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_InputArray*"]), _)]),
pub fn cv_ft_FT02D_process_const__InputArrayR_const__InputArrayR_const__OutputArrayR_const__InputArrayR(matrix: *const c_void, kernel: *const c_void, output: *const c_void, mask: *const c_void, ocvrs_return: *mut Result<()>);
// FT12D_components(InputArray, InputArray, OutputArray)(InputArray, InputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_F1_math.hpp:63
// ("cv::ft::FT12D_components", vec![(pred!(mut, ["matrix", "kernel", "components"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_ft_FT12D_components_const__InputArrayR_const__InputArrayR_const__OutputArrayR(matrix: *const c_void, kernel: *const c_void, components: *const c_void, ocvrs_return: *mut Result<()>);
// FT12D_createPolynomMatrixHorizontal(int, OutputArray, const int)(Primitive, OutputArray, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_F1_math.hpp:94
// ("cv::ft::FT12D_createPolynomMatrixHorizontal", vec![(pred!(mut, ["radius", "matrix", "chn"], ["int", "const cv::_OutputArray*", "const int"]), _)]),
pub fn cv_ft_FT12D_createPolynomMatrixHorizontal_int_const__OutputArrayR_const_int(radius: i32, matrix: *const c_void, chn: i32, ocvrs_return: *mut Result<()>);
// FT12D_createPolynomMatrixVertical(int, OutputArray, const int)(Primitive, OutputArray, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_F1_math.hpp:85
// ("cv::ft::FT12D_createPolynomMatrixVertical", vec![(pred!(mut, ["radius", "matrix", "chn"], ["int", "const cv::_OutputArray*", "const int"]), _)]),
pub fn cv_ft_FT12D_createPolynomMatrixVertical_int_const__OutputArrayR_const_int(radius: i32, matrix: *const c_void, chn: i32, ocvrs_return: *mut Result<()>);
// FT12D_inverseFT(InputArray, InputArray, OutputArray, int, int)(InputArray, InputArray, OutputArray, Primitive, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_F1_math.hpp:118
// ("cv::ft::FT12D_inverseFT", vec![(pred!(mut, ["components", "kernel", "output", "width", "height"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_OutputArray*", "int", "int"]), _)]),
pub fn cv_ft_FT12D_inverseFT_const__InputArrayR_const__InputArrayR_const__OutputArrayR_int_int(components: *const c_void, kernel: *const c_void, output: *const c_void, width: i32, height: i32, ocvrs_return: *mut Result<()>);
// cv::ft::FT12D_polynomial(InputArray, InputArray, OutputArray, OutputArray, OutputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_F1_math.hpp:76
// ("cv::ft::FT12D_polynomial", vec![(pred!(mut, ["matrix", "kernel", "c00", "c10", "c01", "components"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_ft_FT12D_polynomial_const__InputArrayR_const__InputArrayR_const__OutputArrayR_const__OutputArrayR_const__OutputArrayR_const__OutputArrayR(matrix: *const c_void, kernel: *const c_void, c00: *const c_void, c10: *const c_void, c01: *const c_void, components: *const c_void, ocvrs_return: *mut Result<()>);
// FT12D_polynomial(InputArray, InputArray, OutputArray, OutputArray, OutputArray, OutputArray, InputArray)(InputArray, InputArray, OutputArray, OutputArray, OutputArray, OutputArray, InputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_F1_math.hpp:76
// ("cv::ft::FT12D_polynomial", vec![(pred!(mut, ["matrix", "kernel", "c00", "c10", "c01", "components", "mask"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*", "const cv::_OutputArray*", "const cv::_InputArray*"]), _)]),
pub fn cv_ft_FT12D_polynomial_const__InputArrayR_const__InputArrayR_const__OutputArrayR_const__OutputArrayR_const__OutputArrayR_const__OutputArrayR_const__InputArrayR(matrix: *const c_void, kernel: *const c_void, c00: *const c_void, c10: *const c_void, c01: *const c_void, components: *const c_void, mask: *const c_void, ocvrs_return: *mut Result<()>);
// cv::ft::FT12D_process(InputArray, InputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_F1_math.hpp:107
// ("cv::ft::FT12D_process", vec![(pred!(mut, ["matrix", "kernel", "output"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_ft_FT12D_process_const__InputArrayR_const__InputArrayR_const__OutputArrayR(matrix: *const c_void, kernel: *const c_void, output: *const c_void, ocvrs_return: *mut Result<()>);
// FT12D_process(InputArray, InputArray, OutputArray, InputArray)(InputArray, InputArray, OutputArray, InputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_F1_math.hpp:107
// ("cv::ft::FT12D_process", vec![(pred!(mut, ["matrix", "kernel", "output", "mask"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_OutputArray*", "const cv::_InputArray*"]), _)]),
pub fn cv_ft_FT12D_process_const__InputArrayR_const__InputArrayR_const__OutputArrayR_const__InputArrayR(matrix: *const c_void, kernel: *const c_void, output: *const c_void, mask: *const c_void, ocvrs_return: *mut Result<()>);
// createKernel(InputArray, InputArray, OutputArray, const int)(InputArray, InputArray, OutputArray, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_image.hpp:64
// ("cv::ft::createKernel", vec![(pred!(mut, ["A", "B", "kernel", "chn"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_OutputArray*", "const int"]), _)]),
pub fn cv_ft_createKernel_const__InputArrayR_const__InputArrayR_const__OutputArrayR_const_int(a: *const c_void, b: *const c_void, kernel: *const c_void, chn: i32, ocvrs_return: *mut Result<()>);
// createKernel(int, int, OutputArray, const int)(Primitive, Primitive, OutputArray, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_image.hpp:75
// ("cv::ft::createKernel", vec![(pred!(mut, ["function", "radius", "kernel", "chn"], ["int", "int", "const cv::_OutputArray*", "const int"]), _)]),
pub fn cv_ft_createKernel_int_int_const__OutputArrayR_const_int(function: i32, radius: i32, kernel: *const c_void, chn: i32, ocvrs_return: *mut Result<()>);
// filter(InputArray, InputArray, OutputArray)(InputArray, InputArray, OutputArray) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_image.hpp:103
// ("cv::ft::filter", vec![(pred!(mut, ["image", "kernel", "output"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_OutputArray*"]), _)]),
pub fn cv_ft_filter_const__InputArrayR_const__InputArrayR_const__OutputArrayR(image: *const c_void, kernel: *const c_void, output: *const c_void, ocvrs_return: *mut Result<()>);
// inpaint(InputArray, InputArray, OutputArray, int, int, int)(InputArray, InputArray, OutputArray, Primitive, Primitive, Primitive) /home/pro/projects/opencv-lib/opencv-5/install/include/opencv5/opencv2/fuzzy/fuzzy_image.hpp:94
// ("cv::ft::inpaint", vec![(pred!(mut, ["image", "mask", "output", "radius", "function", "algorithm"], ["const cv::_InputArray*", "const cv::_InputArray*", "const cv::_OutputArray*", "int", "int", "int"]), _)]),
pub fn cv_ft_inpaint_const__InputArrayR_const__InputArrayR_const__OutputArrayR_int_int_int(image: *const c_void, mask: *const c_void, output: *const c_void, radius: i32, function: i32, algorithm: i32, ocvrs_return: *mut Result<()>);
